process DQM = {
    source = EventStreamHttpReader { 
        untracked string SelectHLTOutput = 'out4DQM'
        string sourceURL = 'http://srv-c2d05-14.cms:22100/urn:xdaq-application:lid=30'
        untracked string consumerPriority = 'normal'
        int32 max_event_size = 7000000
        untracked string consumerName = 'L1T DQM Consumer'
        int32 max_queue_depth = 5
        untracked double maxEventRequestRate = 25.0
        untracked PSet SelectEvents = { 
            vstring SelectEvents = {
                'GlobalRunCosmicsDQM'
            }

        }

        untracked int32 headerRetryInterval = 3
    }
    module l1GctHwDigis = GctRawToDigi { 
        untracked bool unpackEm = True
        untracked bool verbose = False
        InputTag inputLabel = source
        untracked bool unpackFibres = False
        bool grenCompatibilityMode = False
        int32 gctFedId = 745
        untracked bool unpackInternEm = False
        untracked bool unpackJets = True
        bool hltMode = False
        untracked bool unpackRct = True
        untracked bool unpackInternJets = False
        untracked bool unpackEtSums = True
    }
    module l1GtUnpack = L1GlobalTriggerRawToDigi { 
        untracked int32 DaqGtFedId = 813
        InputTag DaqGtInputTag = source
        int32 UnpackBxInEvent = -1
        uint32 ActiveBoardsMask = 65535
    }
    module l1GtEvmUnpack = L1GlobalTriggerEvmRawToDigi { 
        untracked int32 EvmGtFedId = 812
        InputTag EvmGtInputTag = source
        int32 UnpackBxInEvent = -1
        uint32 ActiveBoardsMask = 65535
        int32 BstLengthBytes = -1
    }
    module l1tgct = L1TGCT { 
        untracked bool verbose = False
        InputTag gctCentralJetsSource = l1GctHwDigis:cenJets:DQM
        InputTag gctNonIsoEmSource = l1GctHwDigis:nonIsoEm:DQM
        InputTag gctEnergySumsSource = l1GctHwDigis::DQM
        untracked bool DQMStore = True
        InputTag gctForwardJetsSource = l1GctHwDigis:forJets:DQM
        InputTag gctIsoEmSource = l1GctHwDigis:isoEm:DQM
        untracked bool disableROOToutput = True
        InputTag gctTauJetsSource = l1GctHwDigis:tauJets:DQM
    }
    module l1tgt = L1TGT { 
        untracked bool DQMStore = True
        InputTag gtEvmSource = l1GtEvmUnpack::DQM
        InputTag gtSource = l1GtUnpack::DQM
        untracked bool disableROOToutput = True
        untracked bool verbose = False
    }
    module l1tdttfqTester = QualityTester { 
        untracked FileInPath qtList = 'DQM/L1TMonitorClient/data/L1TDTTF_QualityTests.xml'
        untracked int32 QualityTestPrescaler = 1
        untracked bool getQualityTestsFromFile = True
    }
    module l1tGctClient = L1TGCTClient { 
        untracked int32 prescaleLS = -1
        untracked int32 prescaleEvt = 1
        untracked string monitorDir = 'L1T/L1TGCT'
    }
    module bxTiming = BxTiming { 
        untracked string HistFolder = 'L1T/BXSynch/'
        untracked int32 VerboseFlag = 0
        untracked string HistFile = ''
        untracked bool DQMStore = True
        untracked vint32 GtBitList = {
            0
            , 1
        }

        untracked int32 ReferenceFedId = 813
        untracked InputTag GtSource = gtUnpack
        untracked InputTag FedSource = source
    }
    module l1tdttf = L1TDTTF { 
        untracked bool verbose = False
        untracked bool DQMStore = True
        untracked string l1tSystemFolder = 'L1T/L1TDTTF'
        untracked bool disableROOToutput = True
        untracked string l1tInfoFolder = 'L1T/EventInfo'
        InputTag dttpgSource = l1tdttfunpack::DQM
    }
    module dqmSaver = DQMFileSaver { 
        untracked int32 saveByTime = 4
        untracked string producer = 'DQM'
        untracked int32 saveByEvent = -1
        untracked int32 forceRunNumber = -1
        untracked int32 saveByRun = -1
        untracked string workflow = ''
        untracked bool saveAtJobEnd = False
        untracked int32 referenceRequireStatus = 100
        untracked string convention = 'Online'
        untracked int32 saveByMinute = 8
        untracked string dirName = '/home/dqmprolocal/output'
        untracked int32 saveByLumiSection = -1
        untracked string referenceHandling = 'qtests'
    }
    module l1tdttfunpack = DTTFFEDReader { 
        InputTag DTTF_FED_Source = source
    }
    module l1tcsctf = L1TCSCTF { 
        InputTag gmtProducer = null
        InputTag statusProducer = csctfunpacker
        untracked string outputFile = ''
        InputTag lctProducer = csctfunpacker
        untracked bool verbose = False
        InputTag trackProducer = csctfunpacker
        untracked bool DQMStore = True
        untracked bool disableROOToutput = True
    }
    module l1trpctf = L1TRPCTF { 
        InputTag rpctfRPCDigiSource = rpcunpacker:DQM
        untracked bool disableROOToutput = True
        InputTag rpctfSource = l1GtUnpack::DQM
        untracked bool verbose = False
        untracked bool DQMStore = True
    }
    module l1trct = L1TRCT { 
        untracked bool disableROOToutput = True
        InputTag rctSource = l1GctHwDigis::DQM
        untracked bool DQMStore = True
        untracked bool verbose = False
    }
    module dqmEnv = DQMEventInfo { 
        untracked string subSystemFolder = 'L1T'
        untracked double eventRateWindow = 0.5
        untracked string eventInfoFolder = 'EventInfo'
    }
    module l1tdemonTester = QualityTester { 
        untracked FileInPath qtList = 'DQM/L1TMonitorClient/data/L1TEmulator_QualityTests.xml'
        untracked int32 QualityTestPrescaler = 500
        untracked bool getQualityTestsFromFile = True
    }
    module l1tdttpgClient = L1TDTTPGClient { 
        untracked string input_dir = 'L1T/L1TDTTPG'
        untracked int32 prescaleLS = -1
        untracked int32 prescaleEvt = 500
        untracked string output_dir = 'L1T/L1TDTTPG/Tests'
    }
    module l1tGctqTester = QualityTester { 
        untracked FileInPath qtList = 'DQM/L1TMonitorClient/data/L1TGCT_QualityTests.xml'
        untracked int32 QualityTestPrescaler = 1
        untracked bool getQualityTestsFromFile = True
    }
    module l1tcsctfTester = QualityTester { 
        untracked FileInPath qtList = 'DQM/L1TMonitorClient/data/L1TCSCTF_QualityTests.xml'
        untracked int32 QualityTestPrescaler = 500
        untracked bool getQualityTestsFromFile = True
    }
    module l1tfed = L1TFED { 
        untracked bool disableROOToutput = True
        untracked bool DQMStore = True
        untracked bool verbose = False
    }
    module l1tgmt = L1TGMT { 
        InputTag gmtSource = l1GtUnpack::DQM
        untracked bool verbose = False
        untracked bool disableROOToutput = True
        untracked bool DQMStore = True
    }
    module l1tgmtClient = L1TGMTClient { 
        untracked string input_dir = 'L1T/L1TGMT'
        untracked int32 prescaleLS = -1
        untracked string monitorName = 'L1T/L1TGMT'
        untracked int32 prescaleEvt = 500
        untracked string output_dir = 'L1T/L1TGMT/Client'
    }
    module l1tEventInfoClient = L1TEventInfoClient { 
        untracked int32 prescaleLS = -1
        untracked int32 prescaleEvt = 1
        untracked string monitorDir = ''
    }
    module l1tltcunpack = LTCRawToDigi { 
    }
    module l1tcsctfClient = L1TCSCTFClient { 
        untracked string input_dir = 'L1T/L1TCSCTF'
        untracked int32 prescaleLS = -1
        untracked bool verbose = False
        untracked string output_dir = 'L1T/L1TCSCTF/QualityTests'
        untracked int32 prescaleEvt = 500
    }
    module l1trpctfClient = L1TRPCTFClient { 
        untracked string input_dir = 'L1T/L1TRPCTF'
        untracked bool verbose = False
        untracked int32 prescaleEvt = 1
        untracked string output_dir = 'L1T/L1TRPCTF/Client'
    }
    module l1tltc = L1TLTC { 
        untracked bool disableROOToutput = True
        untracked bool DQMStore = True
        untracked bool verbose = False
    }
    module l1trpctfqTester = QualityTester { 
        untracked FileInPath qtList = 'DQM/L1TMonitorClient/data/L1TRPCTF_QualityTests.xml'
        untracked int32 QualityTestPrescaler = 1
        untracked bool getQualityTestsFromFile = True
    }
    module csctfunpacker = CSCTFUnpacker { 
        int32 MaxBX = 9
        int32 MinBX = 3
        string mappingFile = ''
        bool swapME1strips = False
        untracked InputTag producer = source
        vint32 slot2sector = {
            0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
        }

    }
    sequence l1tEventInfoseqClient = {l1tEventInfoClient}
    sequence l1trpctfseqClient = {l1trpctfqTester,l1trpctfClient}
    sequence l1tgmtseqClient = {l1tgmtClient}
    sequence l1tGctseqClient = {l1tGctqTester,l1tGctClient}
    sequence l1tcsctfseqClient = {l1tcsctfTester,l1tcsctfClient}
    sequence l1tdttpgseqClient = {l1tdttfqTester,l1tdttpgClient}
    sequence l1tdemonseqClient = {l1tdemonTester}
    path l1tgtpath = {l1GtUnpack,l1GtEvmUnpack,l1tgt}
    path l1trpctfpath = {l1GtUnpack,l1trpctf}
    path l1bxtimingpath = {bxTiming}
    path l1tcsctfpath = {csctfunpacker,l1tcsctf}
    path l1tdttpgpath = {l1tdttfunpack,l1tdttf}
    path l1tltcpath = {l1tltcunpack,l1tltc}
    path l1trctpath = {l1GctHwDigis,l1trct}
    path l1tfedpath = {l1tfed}
    path l1tgctpath = {l1GctHwDigis,l1tgct}
    path l1tgmtpath = {l1GtUnpack,l1tgmt}
    path l1tmonitorClient = {l1tgmtseqClient,l1tcsctfseqClient,l1tdttpgseqClient,l1trpctfseqClient,l1tdemonseqClient,l1tGctseqClient,l1tEventInfoseqClient,dqmEnv,dqmSaver}
    service = DQM { 
        untracked string filter = ''
        untracked double publishFrequency = 5.0
        untracked string collectorHost = 'srv-c2d05-19.cms'
        untracked int32 collectorPort = 9090
        untracked bool debug = False
    }
    service = DQMStore { 
        untracked string referenceFileName = ''
        untracked int32 verbose = 0
    }
    es_module  = CaloGeometryBuilder { 
        vstring SelectedCalos = {
            'HCAL'
            , 'ZDC'
            , 'EcalBarrel'
            , 'EcalEndcap'
            , 'EcalPreshower'
            , 'TOWER'
        }

    }
    es_module  = CaloTowerHardcodeGeometryEP { 
    }
    es_module l1GtPrescaleFactorsTechTrig = L1GtPrescaleFactorsTechTrigTrivialProducer { 
        VPSet PrescaleFactorsSet = {
            { 
                vint32 PrescaleFactors = {
                    1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                }

            }

            , { 
                vint32 PrescaleFactors = {
                    1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                }

            }

        }

    }
    es_module  = DTGeometryESModule { 
        string appendToDataLabel = ''
        bool applyAlignment = True
        string alignmentsLabel = ''
    }
    es_module  = StripCPEfromTrackAngleESProducer { 
        string ComponentName = 'StripCPEfromTrackAngle'
    }
    es_module siStripGainESProducerforSimulation = SiStripGainESProducer { 
        untracked bool printDebug = False
        string appendToDataLabel = 'fake'
        string APVGain = 'fakeAPVGain'
        bool AutomaticNormalization = False
        double NormalizationFactor = 1.0
    }
    es_module  = EcalLaserCorrectionService { 
    }
    es_module L1MuGMTParameters = L1MuGMTParametersProducer { 
        string MergeMethodSRKFwd = 'takeCSC'
        uint32 SubsystemMask = 0
        bool HaloOverwritesMatchedFwd = True
        double PhiWeight_barrel = 1.0
        bool MergeMethodISOSpecialUseANDBrl = True
        bool HaloOverwritesMatchedBrl = True
        uint32 CDLConfigWordbRPCCSC = 16
        int32 IsolationCellSizeEta = 2
        string MergeMethodEtaFwd = 'Special'
        double EtaPhiThreshold_COU = 0.127
        double EtaWeight_barrel = 0.028
        string MergeMethodMIPBrl = 'Special'
        double EtaPhiThreshold_barrel = 0.062
        int32 IsolationCellSizePhi = 2
        string MergeMethodChargeBrl = 'takeDT'
        uint32 VersionSortRankEtaQLUT = 2
        string MergeMethodPtBrl = 'byMinPt'
        bool CaloTrigger = True
        string MergeMethodPtFwd = 'byMinPt'
        bool PropagatePhi = False
        double EtaWeight_endcap = 0.13
        string MergeMethodEtaBrl = 'Special'
        uint32 CDLConfigWordfRPCDT = 1
        uint32 CDLConfigWordDTCSC = 2
        string MergeMethodChargeFwd = 'takeCSC'
        bool DoOvlRpcAnd = False
        double EtaWeight_COU = 0.316
        bool MergeMethodISOSpecialUseANDFwd = True
        string MergeMethodMIPFwd = 'Special'
        string MergeMethodPhiBrl = 'takeDT'
        double EtaPhiThreshold_endcap = 0.062
        uint32 CDLConfigWordCSCDT = 3
        bool MergeMethodMIPSpecialUseANDFwd = False
        string MergeMethodPhiFwd = 'takeCSC'
        string MergeMethodISOFwd = 'Special'
        double PhiWeight_COU = 1.0
        string MergeMethodISOBrl = 'Special'
        double PhiWeight_endcap = 1.0
        uint32 SortRankOffsetBrl = 10
        string MergeMethodSRKBrl = 'takeDT'
        bool MergeMethodMIPSpecialUseANDBrl = False
        uint32 SortRankOffsetFwd = 10
    }
    es_module l1GtStableParameters = L1GtStableParametersTrivialProducer { 
        uint32 NumberL1IsoEG = 4
        uint32 NumberL1JetCounts = 12
        int32 UnitLength = 8
        uint32 NumberL1ForJet = 4
        uint32 IfCaloEtaNumberBits = 4
        uint32 IfMuEtaNumberBits = 6
        uint32 NumberL1TauJet = 4
        int32 NumberPsbBoards = 7
        uint32 NumberConditionChips = 2
        uint32 NumberL1Mu = 4
        uint32 NumberL1CenJet = 4
        uint32 NumberPhysTriggers = 128
        uint32 PinsOnConditionChip = 96
        uint32 NumberTechnicalTriggers = 64
        vint32 OrderConditionChip = {
            2
            , 1
        }

        uint32 NumberPhysTriggersExtended = 64
        int32 WordLength = 64
        uint32 NumberL1NoIsoEG = 4
    }
    es_module  = MuonNumberingInitialization { 
    }
    es_module  = CSCGeometryESModule { 
        string appendToDataLabel = ''
        untracked bool debugV = False
        bool useGangedStripsInME1a = True
        string alignmentsLabel = ''
        bool useOnlyWiresInME1a = False
        bool useRealWireGeometry = True
        bool useCentreTIOffsets = False
        bool applyAlignment = True
    }
    es_module l1GtTriggerMaskAlgoTrig = L1GtTriggerMaskAlgoTrigTrivialProducer { 
        vuint32 TriggerMask = {
            0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
        }

    }
    es_module l1GtTriggerMenuXml = L1GtTriggerMenuXmlProducer { 
        string VmeXmlFile = ''
        string DefXmlFile = 'L1Menu2007.xml'
        string TriggerMenuLuminosity = 'lumi1x1032'
    }
    es_module  = EcalEndcapGeometryEP { 
        untracked bool applyAlignment = False
    }
    es_module  = EcalTrigTowerConstituentsMapBuilder { 
        untracked string MapFile = 'Geometry/EcalMapping/data/EndCap_TTMap.txt'
    }
    es_module idealForDigiCSCGeometry = CSCGeometryESModule { 
        string appendToDataLabel = 'idealForDigi'
        untracked bool debugV = False
        bool useGangedStripsInME1a = True
        string alignmentsLabel = 'fakeForIdeal'
        bool useOnlyWiresInME1a = False
        bool useRealWireGeometry = True
        bool useCentreTIOffsets = False
        bool applyAlignment = False
    }
    es_module hcal_db_producer = HcalDbProducer { 
        untracked string file = ''
        untracked vstring dump = {
            ''
        }

    }
    es_module siStripGainESProducer = SiStripGainESProducer { 
        untracked bool printDebug = False
        string appendToDataLabel = ''
        string APVGain = ''
        bool AutomaticNormalization = False
        double NormalizationFactor = 1.0
    }
    es_module  = HcalHardcodeGeometryEP { 
        untracked bool applyAlignment = False
    }
    es_module  = RPCGeometryESModule { 
        untracked bool compatibiltyWith11 = True
    }
    es_module idealForDigiDTGeometry = DTGeometryESModule { 
        string appendToDataLabel = 'idealForDigi'
        bool applyAlignment = False
        string alignmentsLabel = 'fakeForIdeal'
    }
    es_module L1MuTriggerPtScale = L1MuTriggerPtScaleProducer { 
        int32 nbitPackingPt = 5
        vdouble scalePt = {
            -1.0
            , 0.0
            , 1.5
            , 2.0
            , 2.5
            , 3.0
            , 3.5
            , 4.0
            , 4.5
            , 5.0
            , 6.0
            , 7.0
            , 8.0
            , 10.0
            , 12.0
            , 14.0
            , 16.0
            , 18.0
            , 20.0
            , 25.0
            , 30.0
            , 35.0
            , 40.0
            , 45.0
            , 50.0
            , 60.0
            , 70.0
            , 80.0
            , 90.0
            , 100.0
            , 120.0
            , 140.0
            , 1000000.0
        }

        bool signedPackingPt = False
        int32 nbinsPt = 32
    }
    es_module  = EcalElectronicsMappingBuilder { 
        untracked string MapFile = 'Geometry/EcalMapping/data/EEMap.txt'
    }
    es_module l1GtTriggerMaskTechTrig = L1GtTriggerMaskTechTrigTrivialProducer { 
        vuint32 TriggerMask = {
            0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
        }

    }
    es_module  = HcalTopologyIdealEP { 
    }
    es_module sistripconn = SiStripConnectivity { 
    }
    es_module  = SiStripRecHitMatcherESProducer { 
        string ComponentName = 'StandardMatcher'
        double NSigmaInside = 3.0
    }
    es_module idealForDigiTrackerGeometry = TrackerDigiGeometryESModule { 
        string appendToDataLabel = 'idealForDigi'
        bool fromDDD = True
        bool applyAlignment = False
        string alignmentsLabel = 'fakeForIdeal'
    }
    es_module  = TrackerDigiGeometryESModule { 
        string appendToDataLabel = ''
        bool fromDDD = True
        bool applyAlignment = True
        string alignmentsLabel = ''
    }
    es_module L1MuGMTScales = L1MuGMTScalesProducer { 
        double minDeltaPhi = -0.1963495
        bool signedPackingDeltaPhi = True
        double maxOvlEtaDT = 1.3
        int32 nbitPackingOvlEtaCSC = 4
        vdouble scaleReducedEtaDT = {
            0.0
            , 0.22
            , 0.27
            , 0.58
            , 0.77
            , 0.87
            , 0.92
            , 1.24
            , 1.3
        }

        vdouble scaleReducedEtaFwdRPC = {
            1.04
            , 1.24
            , 1.36
            , 1.48
            , 1.61
            , 1.73
            , 1.85
            , 1.97
            , 2.1
        }

        int32 nbitPackingOvlEtaFwdRPC = 4
        int32 nbinsDeltaEta = 15
        double minOvlEtaCSC = 0.9
        vdouble scaleReducedEtaCSC = {
            0.9
            , 1.06
            , 1.26
            , 1.46
            , 1.66
            , 1.86
            , 2.06
            , 2.26
            , 2.5
        }

        int32 nbinsOvlEtaFwdRPC = 7
        int32 nbitPackingReducedEta = 4
        vdouble scaleOvlEtaRPC = {
            0.72
            , 0.83
            , 0.93
            , 1.04
            , 1.14
            , 1.24
            , 1.36
            , 1.48
        }

        bool signedPackingDeltaEta = True
        int32 nbinsOvlEtaDT = 7
        int32 offsetDeltaPhi = 4
        int32 nbinsReducedEta = 8
        int32 nbitPackingDeltaPhi = 3
        int32 offsetDeltaEta = 7
        int32 nbitPackingOvlEtaBrlRPC = 4
        int32 nbinsDeltaPhi = 8
        int32 nbinsOvlEtaBrlRPC = 7
        double minDeltaEta = -0.3
        double maxDeltaPhi = 0.1527163
        double maxOvlEtaCSC = 1.25
        vdouble scaleReducedEtaBrlRPC = {
            0.0
            , 0.06
            , 0.25
            , 0.41
            , 0.54
            , 0.7
            , 0.83
            , 0.93
            , 1.04
        }

        int32 nbinsOvlEtaCSC = 7
        int32 nbitPackingDeltaEta = 4
        double maxDeltaEta = 0.3
        double minOvlEtaDT = 0.73125
        int32 nbitPackingOvlEtaDT = 4
    }
    es_module  = EcalBarrelGeometryEP { 
        untracked bool applyAlignment = False
    }
    es_module  = TrackerGeometricDetESModule { 
        bool fromDDD = True
    }
    es_module l1GtTriggerMaskVetoAlgoTrig = L1GtTriggerMaskVetoAlgoTrigTrivialProducer { 
        vuint32 TriggerMask = {
            0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
        }

    }
    es_module L1MuTriggerScales = L1MuTriggerScalesProducer { 
        bool signedPackingDTEta = True
        int32 offsetDTEta = 32
        int32 nbinsDTEta = 64
        int32 offsetFwdRPCEta = 16
        bool signedPackingBrlRPCEta = True
        double maxDTEta = 1.2
        int32 nbitPackingFwdRPCEta = 6
        int32 nbinsBrlRPCEta = 33
        int32 nbinsFwdRPCEta = 33
        int32 nbitPackingGMTEta = 6
        double minCSCEta = 0.9
        int32 nbinsPhi = 144
        int32 nbitPackingPhi = 8
        int32 nbitPackingDTEta = 6
        double maxCSCEta = 2.5
        int32 nbinsGMTEta = 31
        double minDTEta = -1.2
        int32 nbitPackingCSCEta = 6
        bool signedPackingFwdRPCEta = True
        int32 offsetBrlRPCEta = 16
        vdouble scaleRPCEta = {
            -2.1
            , -1.97
            , -1.85
            , -1.73
            , -1.61
            , -1.48
            , -1.36
            , -1.24
            , -1.14
            , -1.04
            , -0.93
            , -0.83
            , -0.72
            , -0.58
            , -0.44
            , -0.27
            , -0.07
            , 0.07
            , 0.27
            , 0.44
            , 0.58
            , 0.72
            , 0.83
            , 0.93
            , 1.04
            , 1.14
            , 1.24
            , 1.36
            , 1.48
            , 1.61
            , 1.73
            , 1.85
            , 1.97
            , 2.1
        }

        bool signedPackingPhi = False
        int32 nbitPackingBrlRPCEta = 6
        int32 nbinsCSCEta = 32
        double maxPhi = 6.2831853
        double minPhi = 0.0
        vdouble scaleGMTEta = {
            0.0
            , 0.1
            , 0.2
            , 0.3
            , 0.4
            , 0.5
            , 0.6
            , 0.7
            , 0.8
            , 0.9
            , 1.0
            , 1.1
            , 1.2
            , 1.3
            , 1.4
            , 1.5
            , 1.6
            , 1.7
            , 1.75
            , 1.8
            , 1.85
            , 1.9
            , 1.95
            , 2.0
            , 2.05
            , 2.1
            , 2.15
            , 2.2
            , 2.25
            , 2.3
            , 2.35
            , 2.4
        }

    }
    es_module l1GtTriggerMaskVetoTechTrig = L1GtTriggerMaskVetoTechTrigTrivialProducer { 
        vuint32 TriggerMask = {
            0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
            , 0
        }

    }
    es_module  = ZdcHardcodeGeometryEP { 
        untracked bool applyAlignment = False
    }
    es_module  = EcalPreshowerGeometryEP { 
        untracked bool applyAlignment = False
    }
    es_module l1GtParameters = L1GtParametersTrivialProducer { 
        uint32 EvmActiveBoards = 65535
        uint32 DaqActiveBoards = 65535
        uint32 BstLengthBytes = 30
        int32 TotalBxInEvent = 3
    }
    es_module l1GtPrescaleFactorsAlgoTrig = L1GtPrescaleFactorsAlgoTrigTrivialProducer { 
        VPSet PrescaleFactorsSet = {
            { 
                vint32 PrescaleFactors = {
                    1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                }

            }

            , { 
                vint32 PrescaleFactors = {
                    1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                    , 1
                }

            }

        }

    }
    es_module fakeForIdealAlignment = FakeAlignmentProducer { 
        string appendToDataLabel = 'fakeForIdeal'
    }
    es_module l1GtBoardMaps = L1GtBoardMapsTrivialProducer { 
        vint32 ActiveBoardsDaqRecord = {
            -1
            , 0
            , 1
            , 2
            , 3
            , 4
            , 5
            , 6
            , 7
            , 8
            , -1
            , -1
        }

        vint32 CableToPsbMap = {
            0
            , 0
            , 0
            , 0
            , 1
            , 1
            , 1
            , 1
            , 2
            , 2
            , 2
            , 2
            , 3
            , 3
            , 3
            , 3
            , 4
            , 4
            , 4
            , 4
            , 5
            , 5
            , 5
            , 5
            , 6
            , 6
            , 6
            , 6
        }

        vint32 BoardPositionDaqRecord = {
            1
            , 2
            , 3
            , 4
            , 5
            , 6
            , 7
            , 8
            , 9
            , 10
            , -1
            , -1
        }

        vint32 BoardPositionEvmRecord = {
            1
            , 3
            , -1
            , -1
            , -1
            , -1
            , -1
            , -1
            , -1
            , -1
            , 2
            , -1
        }

        vstring BoardList = {
            'GTFE'
            , 'FDL'
            , 'PSB'
            , 'PSB'
            , 'PSB'
            , 'PSB'
            , 'PSB'
            , 'PSB'
            , 'PSB'
            , 'GMT'
            , 'TCS'
            , 'TIM'
        }

        vstring CableList = {
            'Free'
            , 'Free'
            , 'Free'
            , 'TechTr'
            , 'IsoEGQ'
            , 'NoIsoEGQ'
            , 'CenJetQ'
            , 'ForJetQ'
            , 'TauJetQ'
            , 'ESumsQ'
            , 'JetCountsQ'
            , 'Free'
            , 'Free'
            , 'Free'
            , 'Free'
            , 'Free'
            , 'MQF4'
            , 'MQF3'
            , 'MQB2'
            , 'MQB1'
            , 'MQF8'
            , 'MQF7'
            , 'MQB6'
            , 'MQB5'
            , 'MQF12'
            , 'MQF11'
            , 'MQB10'
            , 'MQB9'
        }

        vint32 BoardHexNameMap = {
            0
            , 253
            , 187
            , 187
            , 187
            , 187
            , 187
            , 187
            , 187
            , 221
            , 204
            , 173
        }

        vint32 ActiveBoardsEvmRecord = {
            -1
            , 1
            , -1
            , -1
            , -1
            , -1
            , -1
            , -1
            , -1
            , -1
            , 0
            , -1
        }

        vint32 BoardSlotMap = {
            17
            , 10
            , 9
            , 13
            , 14
            , 15
            , 19
            , 20
            , 21
            , 18
            , 7
            , 16
        }

        vint32 BoardIndex = {
            0
            , 0
            , 0
            , 1
            , 2
            , 3
            , 4
            , 5
            , 6
            , 0
            , 0
            , 0
        }

    }
    es_source L1MuGMTParametersRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1MuGMTParametersRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source L1MuTriggerScalesRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1MuTriggerScalesRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source  = XMLIdealGeometryESSource { 
        vstring geomXMLFiles = {
            'Geometry/CMSCommonData/data/normal/cmsextent.xml'
            , 'Geometry/CMSCommonData/data/cms.xml'
            , 'Geometry/CMSCommonData/data/cmsMother.xml'
            , 'Geometry/CMSCommonData/data/muonBase.xml'
            , 'Geometry/CMSCommonData/data/cmsMuon.xml'
            , 'Geometry/CMSCommonData/data/beampipe.xml'
            , 'Geometry/CMSCommonData/data/cmsBeam.xml'
            , 'Geometry/CMSCommonData/data/mgnt.xml'
            , 'Geometry/CMSCommonData/data/muonMagnet.xml'
            , 'Geometry/CMSCommonData/data/cavern.xml'
            , 'Geometry/CMSCommonData/data/materials.xml'
            , 'Geometry/CMSCommonData/data/rotations.xml'
            , 'Geometry/CMSCommonData/data/muonMB.xml'
            , 'Geometry/MuonCommonData/data/mbCommon.xml'
            , 'Geometry/MuonCommonData/data/mb1.xml'
            , 'Geometry/MuonCommonData/data/mb2.xml'
            , 'Geometry/MuonCommonData/data/mb3.xml'
            , 'Geometry/MuonCommonData/data/mb4.xml'
            , 'Geometry/DTGeometryBuilder/data/dtSpecsFilter.xml'
            , 'Geometry/MuonCommonData/data/mf.xml'
            , 'Geometry/CSCGeometryBuilder/data/cscSpecs.xml'
            , 'Geometry/CSCGeometryBuilder/data/cscSpecsFilter.xml'
            , 'Geometry/RPCGeometryBuilder/data/RPCSpecs.xml'
            , 'Geometry/MuonCommonData/data/muonNumbering.xml'
            , 'Geometry/MuonCommonData/data/muonYoke.xml'
            , 'Geometry/MuonSimData/data/muonSens.xml'
        }

        string rootNodeName = 'cms:OCMS'
    }
    es_source L1GtTriggerMaskVetoTechTrigRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtTriggerMaskVetoTechTrigRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source L1GtTriggerMaskAlgoTrigRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtTriggerMaskAlgoTrigRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source L1GtParametersRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtParametersRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source L1GtTriggerMaskTechTrigRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtTriggerMaskTechTrigRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source  = SiStripPedestalsFakeESSource { 
        double HighThValue = 5.0
        untracked bool printDebug = False
        uint32 PedestalsValue = 30
        FileInPath file = 'CalibTracker/SiStripCommon/data/SiStripDetInfo.dat'
        double LowThValue = 2.0
    }
    es_source L1GtTriggerMenuRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtTriggerMenuRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source siStripGainFakeESSource = SiStripGainFakeESSource { 
        string appendToDataLabel = 'fakeAPVGain'
        FileInPath file = 'CalibTracker/SiStripCommon/data/SiStripDetInfo.dat'
    }
    es_source L1MuGMTScalesRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1MuGMTScalesRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source siStripLAFakeESSourceforSimulation = SiStripLAFakeESSource { 
        string appendToDataLabel = 'fake'
        double TemperatureError = 10.0
        double Temperature = 297.0
        double HoleRHAllParameter = 0.7
        double ChargeMobility = 480.0
        double HoleBeta = 1.213
        double HoleSaturationVelocity = 8370000.0
        FileInPath file = 'CalibTracker/SiStripCommon/data/SiStripDetInfo.dat'
        double AppliedVoltage = 150.0
    }
    es_source L1GtPrescaleFactorsTechTrigRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtPrescaleFactorsTechTrigRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source L1GtBoardMapsRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtBoardMapsRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source eegeom = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'EcalMappingRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source GlobalTag = PoolDBESSource { 
        PSet DBParameters = { 
            untracked string authenticationPath = '.'
            untracked bool enableReadOnlySessionOnUpdateConnection = False
            untracked int32 idleConnectionCleanupPeriod = 10
            untracked int32 messageLevel = 0
            untracked bool enablePoolAutomaticCleanUp = False
            untracked bool enableConnectionSharing = True
            untracked int32 connectionRetrialTimeOut = 60
            untracked int32 connectionTimeOut = 60
            untracked int32 connectionRetrialPeriod = 10
        }

        untracked string BlobStreamerName = 'TBufferBlobStreamingService'
        string connect = 'frontier://(proxyurl=http://localhost:3128)(serverurl=http://frontier1.cms:8000/FrontierOnProd)(serverurl=http://frontier2.cms:8000/FrontierOnProd)(retrieve-ziplevel=0)/CMS_COND_21X_GLOBALTAG'
        string globaltag = 'CRZT210_V1H::All'
    }
    es_source L1GtStableParametersRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtStableParametersRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source siStripQualityFakeESSource = SiStripQualityFakeESSource { 
        string appendToDataLabel = ''
    }
    es_source L1GtTriggerMaskVetoAlgoTrigRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtTriggerMaskVetoAlgoTrigRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source L1MuTriggerPtScaleRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1MuTriggerPtScaleRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_source es_hardcode = HcalHardcodeCalibrations { 
        untracked vstring toGet = {
            'GainWidths'
            , 'channelQuality'
            , 'ZSThresholds'
        }

    }
    es_source L1GtPrescaleFactorsAlgoTrigRcdSource = EmptyESSource { 
        bool iovIsRunNotTime = True
        string recordName = 'L1GtPrescaleFactorsAlgoTrigRcd'
        vuint32 firstValid = {
            1
        }

    }
    es_prefer GlobalTag = PoolDBESSource{}
    es_prefer GlobalTag = PoolDBESSource{}
    untracked PSet maxEvents = { 
        untracked int32 input = -1
    }
    PSet CSCCommonTrigger = { 
        int32 MaxBX = 9
        int32 MinBX = 3
    }
    PSet CondDBSetup = { 
        PSet DBParameters = { 
            untracked string authenticationPath = '.'
            untracked bool enableReadOnlySessionOnUpdateConnection = False
            untracked int32 idleConnectionCleanupPeriod = 10
            untracked int32 messageLevel = 0
            untracked bool enablePoolAutomaticCleanUp = False
            untracked bool enableConnectionSharing = True
            untracked int32 connectionRetrialTimeOut = 60
            untracked int32 connectionTimeOut = 60
            untracked int32 connectionRetrialPeriod = 10
        }

    }
}

