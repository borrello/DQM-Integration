process DQM = {
    
    untracked PSet maxEvents = {untracked int32 input = -1}

    // SM Event Source
    source = EventStreamHttpReader
    {
        // Change the following line to use a different playback system
	// 1) CERN
        string sourceURL = "http://cmsmon:50082/urn:xdaq-application:lid=29"
	// 2) FNAL
	#string sourceURL = "http://lhc01n02.fnal.gov:50082/urn:xdaq-application:lid=29"
	// 3) ROC
	#string sourceURL = "http://cmsroc9.fnal.gov:50082/urn:xdaq-application:lid=29"
        int32 max_event_size = 7000000
        int32 max_queue_depth = 5

        untracked string consumerName = "L1 Emulator DQM Consumer"
        untracked string consumerPriority = "normal"
        untracked int32 headerRetryInterval = 3  // seconds
        untracked double maxEventRequestRate = 2.5  // hertz
        untracked PSet SelectEvents = { vstring SelectEvents={"*"} }
    }

    # back-end interface service
    service = DaqMonitorROOTBackEnd{}
    
    # send source _AND_ client histograms out to collector every 5000 events
    service = DQMShipMonitoring{
	// event-period for shipping monitoring to collector (default: 25)
	// untracked uint32 period = 5000
    }

    # MonitorDaemon configuration
    # optionally use the following line instead of the ones below
    # include "DQMServices/Examples/test/dqm_monitorDaemon.cfi"
    service = MonitorDaemon{
        untracked bool AutoInstantiate = true
	untracked string DestinationAddress = "srv-c2d05-18"
	untracked int32 SendPort = 9090
    }

#include "L1Trigger/HardwareValidation/hwtest/globrun/gctgmt.cff"
    
    # output into logfiles (verbose)
    service = MessageLogger {
	untracked vstring destinations = { 
	    "detailedInfo" , "critical" , "cout"
	}
	untracked vstring debugModules = { "*" }
	untracked PSet critical     = { untracked string threshold = "ERROR"   }
	untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 
	untracked PSet cout = {
	    untracked string threshold = "WARNING"
	    untracked bool noLineBreaks = true
	    untracked PSet WARNING = {untracked int32 limit = 0 }
	}
    }	

    #########################################################
    #### BEGIN DQM Online Environment #######################
    #########################################################

    #### PUT THE FOLLOWING INTO YOUR PATH FOR OPERATION AT P5
    #### REPLACE SubsystemName by the name of your source ###

    # use include file for dqmEnv dqmSaver
       include "DQMServices/Components/test/dqm_onlineEnv.cfi"
       # put your subsystem name here: 
       # DT, Ecal, Hcal, SiStrip, Pixel, RPC, CSC, L1T 
       # (this goes into the filename)
       replace dqmSaver.fileName      = "L1TEMU"
       replace dqmSaver.isPlayback    = true
       replace dqmSaver.dirName       = "/data1/dropbox"
       # (this goes into the foldername)
       replace dqmEnv.subSystemFolder = "L1TEMU"
       
       # optionally change fileSaving  conditions
       // replace dqmSaver.prescaleLS =   -1
       // replace dqmSaver.prescaleTime = -1 # in minutes
       // replace dqmSaver.prescaleEvt =  -1
       // replace dqmSaver.saveAtRunEnd = true
       // replace dqmSaver.saveAtJobEnd = false
       # will add switch to select histograms to be saved soon
   
    #########################################################
    #### END ################################################
    #########################################################

### FIX YOUR  PATH TO INCLUDE dqmEnv and dqmSaver
#    path p ={dqmSource & qTester & dqmClient & dqmEnv & dqmSaver }
     path p ={dqmEnv & dqmSaver }


#################################
 
    #path degct = { gctUnpacker, l1GctEmulDigis }
    path degmt = { gtUnpack	,l1GmtEmulDigis }
    path ana   = { l1compare	,l1demon }
    
    include "L1Trigger/HardwareValidation/data/L1Comparator.cfi"

    replace l1compare.GCTsourceData = gctUnpacker::demon
    replace l1compare.GCTsourceEmul = l1GctEmulDigis::demon

    replace l1compare.GMTsourceData = gtUnpack
    replace l1compare.GMTsourceEmul = l1GmtEmulDigis

    replace l1compare.VerboseFlag   = 0
    replace l1compare.DumpMode      = 0
    replace l1compare.COMPARE_COLLS = { 0,0,0,0, 0,0,0,0,0, 0,1,0 }

    include "DQM/L1TMonitor/data/L1TDEMON.cfi"
    replace l1demon.VerboseFlag     = 0

    ### GCT emulator
    include "L1TriggerConfig/L1ScalesProducers/data/L1CaloScalesConfig.cff"
    include "L1TriggerConfig/GctConfigProducers/data/L1GctConfig.cff"

    module l1GctEmulDigis = L1GctEmulator { 
	InputTag inputLabel = gctUnpacker
	string jetFinderType = "tdrJetFinder"
    }
    
    ### GCT unpacker
    module gctUnpacker = GctRawToDigi {
	InputTag inputLabel = source
	int32 gctFedId               = 745
	untracked bool verbose       = false
	untracked bool unpackEm      = true
	untracked bool unpackJets    = true
	untracked bool unpackEtSums  = false
	untracked bool unpackInternEm= false
	untracked bool unpackFibres  = false
    }

    ### GMT emulator
    include "L1TriggerConfig/L1GtConfigProducers/data/L1GtConfig.cff"
    include "L1TriggerConfig/L1ScalesProducers/data/L1MuTriggerScalesConfig.cff"
    include "L1TriggerConfig/L1ScalesProducers/data/L1MuGMTScalesConfig.cff"
    include "L1TriggerConfig/GMTConfigProducers/data/L1MuGMTParametersConfig.cff"
    module l1GmtEmulDigis = L1MuGlobalMuonTrigger {
	InputTag DTCandidates   = gtUnpack:DT   //l1DttfEmulDigis:DT
	InputTag CSCCandidates  = gtUnpack:CSC  //l1CscTfEmulDigis:CSC
	InputTag RPCbCandidates = gtUnpack:RPCb //l1RpcEmulDigis:RPCb
	InputTag RPCfCandidates = gtUnpack:RPCf //l1RpcEmulDigis:RPCf
	untracked int32 Debug   = 0
	int32 BX_min            = -4            // bx's to be processed
	int32 BX_max            =  4
	int32 BX_min_readout    = -1            // bx's to be readout
	int32 BX_max_readout    =  1
	untracked bool WriteLUTsAndRegs = false
    }
    
    ### GMT unpacking
    module gtUnpack = L1GlobalTriggerRawToDigi {
	untracked InputTag DaqGtInputTag = source
	untracked int32 DaqGtFedId = 813
	uint32 ActiveBoardsMask = 0xFFFF //65535
	int32 UnpackBxInEvent = -1
    }
    
}
