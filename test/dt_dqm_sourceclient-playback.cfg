process DTDQM = {

     
  source = EventStreamHttpReader{
    string sourceURL = "http://cmsmondev:50082/urn:xdaq-application:lid=29"
    int32 max_event_size = 7000000
    int32 max_queue_depth = 5
    untracked string consumerName = "DT DQM Source"
    untracked string consumerPriority = "normal"
    untracked int32 headerRetryInterval = 3
    untracked double maxEventRequestRate = 10
    untracked PSet SelectEvents = { vstring SelectEvents={"*"} }
  }

  untracked PSet maxEvents = {untracked int32 input = -1}


   ### DQMStore Service
   include "DQMServices/Core/data/DQM.cfg"
   //  replace DQMStore.referenceFileName = "reference file going here"
   replace DQMStore.verbose = 0
   replace DQM.collectorHost = "srv-c2d05-18"

   ####  DQM File Saving and Environment
   include "DQMServices/Components/data/DQMEnvironment.cfi"
   replace dqmSaver.convention       = "Online"
   replace dqmSaver.dirName          = "/cms/mon/data/dropbox"
   replace dqmSaver.producer         = "Playback"
   replace dqmEnv.subSystemFolder    = "DT"

   replace dqmSaver.saveByLumiSection =  1
   // replace dqmSaver.saveByMinute      = -1
   // replace dqmSaver.saveByEvent       = -1
   replace dqmSaver.saveByRun         =  1
   replace dqmSaver.saveAtJobEnd      = true



  include "DQM/Integration/test/dtReco.cff"

  service = MessageLogger {
    untracked vstring destinations = { "cout" }
    untracked PSet cout             = { untracked string threshold = "WARNING" }	
  }


  module dtqTester = QualityTester {
    untracked FileInPath qtList = "DQM/DTMonitorClient/test/QualityTests.xml"
    untracked int32 prescaleFactor = 1
  }

    include "DQM/DTMonitorModule/data/dtDataIntegrityTask.cfi"
    
  module dataIntegrityTest = DTDataIntegrityTest {
    untracked bool debug = false
    untracked bool writeHisto = false
    untracked string folderRoot = ""
    untracked int32 nTimeBin = 9
    untracked int32 diagnosticPrescale = 1
    untracked bool doTimeHisto = false
  }
    
    
  module triggerTest = DTLocalTriggerTest{
    untracked bool dataFromDDU = false
    untracked int32 diagnosticPrescale = 1
    untracked string folderRoot = ""
  }
    
    include "DQM/DTMonitorModule/data/dtDigiTask.cfi"
    include "DQM/DTMonitorModule/data/dtResolutionTask.cfi"
    include "DQM/DTMonitorModule/data/dtEfficiencyTask.cfi"
    include "DQM/DTMonitorModule/data/dtChamberEfficiencyTask.cfi"
    include "DQM/DTMonitorModule/data/dtSegmentTask.cfi"
    include "DQM/DTMonitorModule/data/dtTriggerTask.cfi"

  module resolutionTest = DTResolutionTest{
    untracked bool debug = false
    untracked string folderRoot = ""
    untracked string histoTag = "hResDist"	
    #Names of the quality tests: they must match those specified in "qtList"
    untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
    untracked string meanTestName = "ResidualsMeanInRange"
    untracked string sigmaTestName = "ResidualsSigmaInRange"
    untracked int32 diagnosticPrescale = 1
  }


  module efficiencyTest = DTEfficiencyTest{
    untracked bool debug = false
    #Names of the quality tests: they must match those specified in "qtList"
    untracked string EfficiencyTestName = "EfficiencyInRange"
    untracked string UnassEfficiencyTestName = "UnassEfficiencyInRange"
    untracked string folderRoot = ""
    untracked int32 diagnosticPrescale = 1
    untracked int32 BadSLpercentual = 10
  }


  module chamberEfficiencyTest = DTChamberEfficiencyTest{
    untracked bool debug = false
    #Names of the quality tests: they must match those specified in "qtList"
    untracked string XEfficiencyTestName = "ChEfficiencyInRangeX"
    untracked string YEfficiencyTestName = "ChEfficiencyInRangeY"
    untracked string folderRoot = ""
    untracked int32 diagnosticPrescale = 1
  }


  module deadChannelTest = DTDeadChannelTest{
    #Names of the quality tests: they must match those specified in "qtList"
    untracked string EfficiencyTestName = "OccupancyDiffInRange"
    untracked string folderRoot = ""
    untracked int32 diagnosticPrescale = 1
  }
	
  module noiseTest = DTNoiseTest {
    untracked bool debug = false
    untracked int32 HzThreshold = 300
    untracked string meanTestName = "NoiseMeanInRange"
    untracked string folderRoot = ""
    untracked string folderTag = "Occupancies"
    untracked string histoTag = "OccupancyNoise_perCh"
    untracked int32 diagnosticPrescale = 1
  }



  path dqmmodules     = { dqmEnv & dqmSaver }
  path reco = {dtunpacker & dt1DRecHits & dt2DSegments & dt4DSegments }

  //  path dtDQMTask      = { dtDigiMonitor & dtResolutionAnalysisMonitor & dtEfficiencyMonitor & dtChamberEfficiencyMonitor & dtTriggerMonitor & dtSegmentAnalysisMonitor }
  path dtDQMTask      = { dtDigiMonitor & dtResolutionAnalysisMonitor & dtTriggerMonitor }
  //  path dtDQMTest   = { dataIntegrityTest & triggerTest & chamberEfficiencyTest & resolutionTest & efficiencyTest & deadChannelTest & noiseTest & dtqTester }
  path dtDQMTest   = { dataIntegrityTest & triggerTest & dtqTester }

}
