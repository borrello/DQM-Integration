process DQM={
    
    untracked PSet maxEvents = {untracked int32 input = -1}

    // SM Event Source
     source = NewEventStreamFileReader {
        untracked vstring fileNames = {
            "file:/data1/lookarea/GlobalJu07.00015137.0001.A.storageManager.0.0000.dat"
            "file:/data1/lookarea/GlobalJu07.00015145.0001.A.storageManager.0.0000.dat"
            "file:/data1/lookarea/GlobalJu07.00015148.0001.A.storageManager.0.0000.dat"
        }
     }

    include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/RPCGeometry/data/rpcGeometry.cfi"
    include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"

###############    Raw To Digi:   #########################
      include "EventFilter/RPCRawToDigi/data/RPCOrconCabling.cfi"
      module rpcunpacker = RPCUnpackingModule{
         untracked InputTag InputLabel = source
      }

#################    Data Quality Monitoring:   #########################

    # back-end interface service
    service = DaqMonitorROOTBackEnd{}
    
    # send source _AND_ client histograms out to collector every 5000 events
    service = DQMShipMonitoring{
	// event-period for shipping monitoring to collector (default: 25)
	untracked uint32 period = 100
    }

    # MonitorDaemon configuration
    # optionally use the following line instead of the ones below
    # include "DQMServices/Examples/test/dqm_monitorDaemon.cfi"
    service = MonitorDaemon{
        untracked bool AutoInstantiate = true
	untracked string DestinationAddress = "srv-c2d05-16"
	untracked int32 SendPort = 9090
    }

    include "DQM/RPCMonitorDigi/data/RPCDigiMonitoring.cfi"    
    replace rpcdigidqm.dqmshifter = true
    replace rpcdigidqm.DigiDQMSaveRootFile = true    

    service = MessageLogger {
	untracked vstring destinations = { 
	    "detailedInfo" , "critical" , "cout"
	}
	untracked vstring debugModules = { "*" }
	untracked PSet critical     = { untracked string threshold = "ERROR"   }
	untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 
	untracked PSet cout = {
          untracked string threshold = "WARNING"
           untracked bool noLineBreaks = true
	    untracked PSet WARNING = {untracked int32 limit = 0 }
	}
    }	

     path p ={rpcunpacker, rpcdigidqm }

} 
