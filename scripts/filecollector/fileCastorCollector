#!/usr/bin/env python

import os, datetime, time,  sys, shutil, glob, re, subprocess as sp
#if len(sys.argv)<=1 or not os.path.exists(sys.argv[1]):
#  print "No valid configuration file"
#  sys.exit()
#execfile(sys.argv[1])
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
###### CONFIG FILE VARIABLES        ######
CASTOR_BASE="/castor/cern.ch/cms/store/temp/dqm"
INSTANCE_DIR="online"
FILE_TYPE=".ig"
DROPBOX="/data/ispy-files/dropbox"
TMP_DROPBOX="/data/ispy-files/.dropbox"
REPOSITORY_DIR="/data/ispy-files/.repo"
CASTOR_WAIT_TIME=120
TIME_OUT=600
DEBUG=False
###### END OF CONFIG FILE VARIABLES ######
#####       HELPER FUNCTIONS        ######
def debugMsg(level,message):
  LEVELS=["INFO","WARNING","ERROR"]
  d=datetime.datetime.today()
  timeStamp=d.strftime("%Y/%m/%d\t%H:%M:%S")
  msg="%s\t%s:\t%s\n" % (timeStamp,LEVELS[level],message)
  sys.stdout.write(msg)
  return True
def executeCmd(cmd):
  cmdHdl=sp.Popen(cmd,shell=True,stdout=sp.PIPE,stderr=sp.PIPE)
  t=0
  cmdHdl.poll()
  while cmdHdl.returncode == None and t<TIME_OUT:
    t=t+1
    cmdHdl.poll()
    time.sleep(1)
  if t >= TIME_OUT and not cmdHdl.returncode:
    try:
      os.kill(cmdHdl.pid,9)
      debugMsg(2,"Execution timed out on Command: '%s'" % cmd)
    except:
      DEBUG and debugMsg(1,"Execution timed out on Command: '%s' but it ended while trying to kill it, adjust timer" % cmd)
  cmdHdl.poll()
  return (cmdHdl.stdout,cmdHdl.stderr,cmdHdl.returncode)

#####         MAIN PROGRAM         ######
if not os.path.exists(REPOSITORY_DIR):
  print 
  os.  makedirs(REPOSITORY_DIR)
  
if not os.path.exists(DROPBOX):
  print 
  os.  makedirs(DROPBOX)
  
if not os.path.exists(TMP_DROPBOX):
  print 
  os.  makedirs(TMP_DROPBOX)
  
while True:
  #get list of directories from castor
  cmd="rfdir %s/%s | awk '{print($9)}'" % (CASTOR_BASE,INSTANCE_DIR)
  DEBUG and debugMsg(0,"Calling shell command '%s'" % cmd)
  (cmdHdl,error,retcode)=executeCmd(cmd)
  if retcode == None or retcode > 0:
    debugMsg(2,"Command '%s' returned with code %s and error message: %s " % (cmd,str(retcode) or "None" ,error.read().replace("\n","@")))
    continue 
  dirlist=cmdHdl.read().split()
  if not dirlist:
    DEBUG and debugMsg(1,"No directories found, retrying in '%d' seconds" % CASTOR_WAIT_TIME)
    time.sleep(CASTOR_WAIT_TIME)
    continue
  WATCH_DIR=[]  
  #select the directories that are going to be watched
  for directory in dirlist:
    repoFile="%s/%s.rep" % (REPOSITORY_DIR,directory)
    if not os.path.exists(repoFile):
      WATCH_DIR.append(directory)
      DEBUG and debugMsg(0,"Directory %s/%s/%s added to watch list" % (CASTOR_BASE,INSTANCE_DIR,directory))
    else:
      repoyear=int(directory[:4])
      repomonth=int(directory[4:])
      if datetime.date.today().year == repoyear and repomonth+1 >= datetime.date.today().month:
        WATCH_DIR.append(directory)
        DEBUG and debugMsg(0,"Directory %s/%s/%s added to watch list")
  #Find what files have been processed
  PROCESSED_FILES_LIST=[]
  for directory in WATCH_DIR:
    repoFile="%s/%s.rep" % (REPOSITORY_DIR,directory)
    if not os.path.exists(repoFile):
      debugMsg(0,"Repository File %s does not exists, found new directory!" % repoFile)
      continue
    f=open(repoFile,"r")
    foundFiles=[x.strip() for x in f.readlines()]
    DEBUG and debugMsg(0,"Found %d processed files in %s" % (len(foundFiles),directory))
    if len(foundFiles): 
      PROCESSED_FILES_LIST.extend(foundFiles)
    f.close()
  debugMsg(0,"Found %d new files already processed" % len(PROCESSED_FILES_LIST))
  #Create list of files to copy
  NEW_FILES_DICT={}
  newFilesFound=0
  for directory in WATCH_DIR:  
    repoFile="%s/%s.rep" % (REPOSITORY_DIR,directory)
    cmd="rfdir %s/%s/%s | grep \"%s\" | awk '{print($5\" \"$9)}'" % (CASTOR_BASE,INSTANCE_DIR,directory,FILE_TYPE)
    DEBUG and debugMsg(0,"Calling shell command '%s'" % cmd)
    (cmdHdl,error,retcode)=executeCmd(cmd)
    if retcode == None or retcode > 0:
      debugMsg(2,"Command '%s' returned with code %s and error message: %s " % (cmd,str(retcode) or "None" ,error.read().replace("\n","@")))
      continue 
    fileList=cmdHdl.read().split("\n")
    for newFile in fileList:
      if newFile:
        newFileName=newFile.split()[1]
        newFileSize=newFile.split()[0]
        if newFileName not in sorted(PROCESSED_FILES_LIST) :
          newFilesFound=newFilesFound+1
          fileName="%s/%s/%s/%s" % (CASTOR_BASE,INSTANCE_DIR,directory,newFileName)
          NEW_FILES_DICT.setdefault(fileName,[long(newFileSize),repoFile])
  debugMsg(0,"Found %d new files to copy" % newFilesFound)
  #Copy Files
  for newFile, info in NEW_FILES_DICT.items():
    cmd="rfcp %s %s" % (newFile,TMP_DROPBOX)
    DEBUG and debugMsg(0,"Calling shell command '%s'" % cmd)
    (cmdHdl,error,retcode)=executeCmd(cmd)
    if retcode == None or retcode > 0:
      debugMsg(2,"Command '%s' returned with code %s and error message: %s " % (cmd,str(retcode) or "None" ,error.read().replace("\n","@")))
      continue 
    cmdOutput=cmdHdl.read().replace("\n","@")
    DEBUG and debugMsg(0,"Command output: '%s'" % cmdOutput)
    newFileTemp="%s/%s" % (TMP_DROPBOX,os.path.basename(newFile))
    newFileDest="%s/%s" % (DROPBOX,os.path.basename(newFile))
    repoFile=open(info[1],"a")
    if os.path.exists(newFileTemp) and os.stat(newFileTemp).st_size == info[0]:
      os.rename(newFileTemp,newFileDest)
      debugMsg(0,"File '%s' was succesfully tranferred" % newFile)
      repoFile.write("%s\n" % os.path.basename(newFileDest))
      DEBUG and debugMsg(0,"Calling shell command '%s'" % cmd)
    else:
      debugMsg(3,"File '%s' failed to tranfer" % newFile)
      if os.path.exists(newFileTemp):
        debugMsg(2,"File '%s' was not tranfered completly, expected %d bytes and got %d bytes, removing tmp file" % (newFile,info[0],os.stat(newFileTemp).st_size))
        os.remove(newFileTemp)
      else:
        debugMsg(2,"rfcp failed wi error message: %s" % cmdOutput)
    repoFile.close()
  time.sleep(CASTOR_WAIT_TIME)
