#!/usr/bin/env python
#as used by wassh
import sys,os
ACTIONS=["start","stop","restart"]
MODULES=["Collector","Merger","Register","Transfer","Verify","ProdClean","FilerClean","Classifier","All"]
LOCALHOST=os.getenv("HOSTNAME")
__doc__="""
ratsControl action module from cfgfile [on hostname]
   action      = start | stop | restart 
   module      = %s
   cfgfile     = Configuration file from where to extract the RATS variable with
                 the correct (hosts,script,alivechk)->Module association
   on hostname = Hostname on which to perform the action. If not specifyed the 
                 action will be performed in all hosts associated with the 
                 module
                   
   
""" % " | ".join(MODULES)
#Function for starting and stoping modules
def start_app(module,host=LOCALHOST):
  if LOCALHOST.lower()==host.lower():
    print "Running %s on LOCALHOST" % RATS[module]["alivechk"]
    cmd="%s %s %s 2>&1" % (RATS[module]["alivechk"],CFGFILE,RATS[module]["script"])
    starter=os.popen(cmd)
    print starter.read()
    starter.close()
  else:
    print "Running %s on %s" % (RATS[module]["alivechk"],host)
    cmd="ssh %s \"%s %s %s\" 2>&1" % (host,RATS[module]["alivechk"],CFGFILE,RATS[module]["script"])
    starter=os.popen(cmd)
    print starter.read()
    starter.close()
  
def stop_app(module,host=LOCALHOST):
  if LOCALHOST.lower()==host.lower():
    print "Stopping %s on LOCALHOST" % RATS[module]["script"]           
    cmd="echo $(ps -eF|grep -P '%s[ ]+%s'| grep -v grep | awk '{print($2)}')" % (RATS[module]["script"],CFGFILE)
    stoper=os.popen(cmd)
    pid=stoper.read()
    stoper.close()
    if pid:
      cmd="kill -9 %s 2>&1" % pid
      stoper=os.popen(cmd)
      print stoper.read()
      stoper.close()
    else:  
      print "ratsControl cant find %s running in LOCALHOST" % RATS[module]["script"]
  else:
    print "Stopping %s on %s" % (RATS[module]["script"],host)           
    cmd="ssh %s \"echo \$(ps -eF|grep -P '%s[ ]+%s' | grep -v grep | awk '{print(\$2)}')\"" % (host,RATS[module]["script"],CFGFILE)
    stoper=os.popen(cmd)
    pid=stoper.read()
    stoper.close()
    if pid:
      cmd="ssh %s kill -9 %s 2>&1" % (host,pid)
      stoper=os.popen(cmd)
      print stoper.read()
      stoper.close()
    else:  
      print "ratsControl cant find %s running in %s" % (RATS[module]["script"],host)
  
def process_module(module):
  if module not in RATS.keys():
    return
  for host in RATS[module]["hosts"]:
    if not HOST or HOST == host:
      if ACTION == "start":
        start_app(module,host)
        print "......................................................"
      elif ACTION == "stop":
        stop_app(module,host)
        print "......................................................"
      else:
        stop_app(module,host)
        start_app(module,host)
        print "......................................................"


#Argument handling
if len(sys.argv) != 5 and len(sys.argv) != 7:
  print "Incorrect number of arguments"
  print __doc__
  sys.exit()
  
if sys.argv[2] not in MODULES:
  print "Incorrect action %s" % sys.argv[2]
  print __doc__
  sys.exit() 
    
if sys.argv[1] not in ACTIONS:
  print "Incorrect action %s" % sys.argv[1]
  print __doc__
  sys.exit()  
  
if sys.argv[3] != "from":
  print "Incorrect sintax expecting from got %s" % sys.argv[3]
  print __doc__
  sys.exit()  

if not os.path.exists(sys.argv[4]):
  print "Config file %s does not exists" % sys.argv[4]
  print __doc__
  sys.exit()   
HOST=None
if len(sys.argv)==7 and sys.argv[5]!="on":
  print "Incorrect sintax expecting on got %s" % sys.argv[5]
  print __doc__
  sys.exit() 
elif len(sys.argv)==7:
  HOST=sys.argv[6]
execfile(sys.argv[4])
CFGFILE=os.path.dirname(sys.argv[4]) and sys.argv[4] or "/".join([os.path.abspath("."),sys.argv[4]])
ACTION=sys.argv[1]
MODULE=sys.argv[2]


#Down to bussiness  
if MODULE == "All":
  for module in MODULES[:len(MODULES)-1]:
    process_module(module)
else:
  process_module(MODULE)

