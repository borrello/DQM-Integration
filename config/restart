#!/bin/zsh
setopt sh_word_split

# DQM restart command. Intended to run at server boot, for example
# via '@reboot /home/dqm/config/restart' crontab entry, and after
# a server upgrade. If server processes are already running, they
# are first stopped.
#
# See the operations documentation on how to use this script:
#   https://twiki.cern.ch/twiki/bin/view/CMS/DQMGuiProduction

######################################################################
# Set parameters. Use the latest installed server by default.
#
# Collect arguments and verify the invocation came from documented
# (copy-and-paste) instructions to avoid ops mishaps, such as one
# caused tired or insufficiently cafeinated operator.
#
# Note that we treat "start" and "restart" actions identically to
# prevent operational errors of starting overlapping servers.
PS4="+ "
ACT=${1:-restart}
DQMV=${2:-latest}
ARCH=slc4_ia32_gcc345
NOW=$(date +%Y%m%d%H%M%S)
CHECK=$(echo "$3" | md5sum | awk '{print $1}')
HOST=$(hostname | tr '[:upper:]' '[:lower:]' | sed 's/\..*//')
case $HOST in
  srv-c2d04* ) DQM_DIR=/home/dqmlocal DQM_SW=/home/dqmlocal/rpms ;;
  srv-c2d05* ) DQM_DIR=/home/dqm DQM_SW=/home/dqm/rpms ;;
  vocms* )     DQM_DIR=/data/dqm DQM_SW=/data/sw ;;
esac
case $HOST in
  srv-c2d05-19 | srv-c2d04-2[12] ) CONFIGS="online" ;;
  srv-c2d05-18 | srv-c2d04-23 )    CONFIGS="online-playback" ;;
  srv-c2d05-16 | srv-c2d04-24 )    CONFIGS="online-test" ;;
  srv-c2d05-17 )                   CONFIGS="gui-test" ;;
  srv-c2d04-30 )                   CONFIGS="online-milk" ;;
  vocms34 )                        CONFIGS="offline offline-caf offline-dev" ;;
  * )                              CONFIGS= ;;
esac

if [ X"$DQMV" = Xlatest ]; then
  DQMV=$(ls -tr $DQM_SW/$ARCH/cms/dqmgui | tail -1)
fi

case $DQMV in [0-9]*.[0-9]*.[0-9]* ) ;; * )
  echo "$0: unrecognised version '${DQM:-(none)}' (arg: $2);" \
       "please check documentation." 1>&2
  exit 1 ;;
esac

EXTRA=
case $ACT in *=* ) EXTRA=${ACT#*\=} ACT=${ACT%\=*} ;; esac
case $ACT in stop | status | restart ) ;; start ) ACT=restart ;; * )
  echo "$0: unrecognised action '${ACT:-(none)}' (arg: $1);" \
       "please check documentation." 1>&2
  exit 1 ;;
esac

if [ -n "$(echo "$EXTRA" | sed -e 's/,*migration,*//g' -e 's/,*agents,*//g' \
           -e 's/,*collector,*//g' -e 's/,*webserver,*//g' \
	   -e 's/,*renderer,*//g' -e 's/,*logger,*//g')" ]; then
  echo "$0: unrecognised action parameter '${EXTRA:-(none)}';" \
       "please check documentation." 1>&2
  exit 1
fi

[ $ACT = status ] ||
{ ps -oargs= $PPID | grep -q -e crond; } ||
[ X"$CHECK" = X94e261a5a70785552d34a65068819993 ] ||
{ echo "$0: cannot complete operation, please check documentation."; exit 2; }

######################################################################
# Utilities.
statproc() {
  local title="$1" pat="$2"
  echo "${newline}${title}:"
  pgrep -u $(id -u) -f "$pat" | xargs -r ps -o pid=,bsdstart=,args= |
    perl -p -e 's/^/  /; END { $. || print "  (none running)\n"; }'
  newline="\n"
}

killproc() {
  local T title pat nextmsg
  T=1 title="$1" pat="$2"
  nextmsg="${newline}Stopping ${title}:"
  for pid in $(pgrep -u $(id -u) -f "$pat" | sort -rn); do
    psline=$(ps -o pid=,bsdstart=,args= $pid |
             perl -n -e 'print join(" ", (split)[0..4])')
    [ -n "$nextmsg" ] && { echo "$nextmsg"; nextmsg=; }
    echo -n "Stopping $pid ($psline):"
    for sig in TERM TERM QUIT KILL; do
      echo -n " SIG$sig"
      kill -$sig $pid
      sleep 1
      [ $(ps h $pid | wc -l) = 0 ] && break
      sleep $T
      T=$(expr $T \* 2)
      [ $(ps h $pid | wc -l) = 0 ] && break
    done
    echo
  done
  newline="\n"
}

######################################################################
# Source server environment. Move to $DQM_DIR so cwd is safe.
. $DQM_SW/cmsset_default.sh
. $DQM_SW/$ARCH/cms/dqmgui/$DQMV/etc/profile.d/env.sh
cd $DQM_DIR

# If this is a status call, show running processes and exit now.
newline=
if [ $ACT = status ]; then
  case ${EXTRA:-agents} in *agents* )
    statproc "File agents" "visDQM.*Daemon|visDQMIndex|zip" ;;
  esac

  case ${EXTRA:-migration} in *migration* )
    statproc "Migration agents" "visDQMMigration|sleep" ;;
  esac

  case ${EXTRA:-collector} in *collector* )
    statproc "Collector" "DQMCollector" ;;
  esac

  case ${EXTRA:-logger} in *logger* )
    statproc "Loggers" "visDQMRotateLogs" ;;
  esac

  case ${EXTRA:-webserver} in *webserver* )
    statproc "Web servers" "visDQMGui" ;;
  esac

  case ${EXTRA:-renderer} in *renderer* )
    statproc "Render servers" "visDQMRender" ;;
  esac
  exit 0
fi

# Should be stop or restart from here on.
[ $ACT = restart ] || [ $ACT = stop ] || { echo "$0: $LINENO: internal error"; exit 3; }

######################################################################
# Stop any existing daemons.

newline=
case ${EXTRA:-agents} in *agents* )
  # NB: leave visDQMIndex and zip processes alone
  killproc "file agents" "visDQM.*Daemon" ;;
esac

case ${EXTRA:-migration} in *migration* )
  killproc "migration agents" "visDQMMigration|sleep" ;;
esac

case ${EXTRA:-collector} in *collector* )
  killproc "collector" "DQMCollector" ;;
esac

case ${EXTRA:-webserver} in *webserver* )
  for cfg in $CONFIGS; do
    (set -x; visDQMControl stop all from $DQM_DIR/config/server-conf-$cfg.py)
  done ;;
esac

[ $ACT = stop ] && exit 0

# Should be restart from here on.
[ $ACT = restart ] || { echo "$0: $LINENO: internal error"; exit 3; }

######################################################################
# Start file handling agents if requested.
case $HOST:${EXTRA:-agents} in
  # old production
  srv-c2d05-19:*agents* )
    DQM_DATA=/dqmdata/dqm
    mkdir -p $DQM_DATA/repository/original {$DQM_DATA,$DQM_DIR}/agents
    (set -x
     (visDQMReceiveDaemon \
       $DQM_DATA/uploads \
       $DQM_DATA/repository/original \
       $DQM_DATA/agents/import-old \
       $DQM_DATA/agents/import-local \
       $DQM_DATA/agents/import-offsite \
     ) >& $DQM_DIR/agents/$NOW-$HOST-receive.log </dev/null &

     (visDQMImportDaemon \
       $DQM_DATA/agents/import-old \
       $DQM_DATA/repository/original \
       $DQM_DIR/ix \
     ) >& $DQM_DIR/agents/$NOW-$HOST-import.log </dev/null & ) ;;

  # dqm-prod-local
  srv-c2d04-21:*agents* )
    DQM_DATA=/dqmdata/dqm
    mkdir -p {$DQM_DATA,$DQM_DIR}/agents
    (set -x
     (visDQMImportDaemon \
       $DQM_DATA/agents/import-local \
       $DQM_DATA/repository/original \
       $DQM_DIR/ix \
     ) >& $DQM_DIR/agents/$NOW-$HOST-import.log </dev/null & ) ;;

  # dqm-prod-offsite
  srv-c2d04-22:*agents* )
    DQM_DATA=/dqmdata/dqm
    mkdir -p {$DQM_DATA,$DQM_DIR}/agents
    (set -x
     (visDQMImportDaemon \
       $DQM_DATA/agents/import-offsite \
       $DQM_DATA/repository/original \
       $DQM_DIR/ix \
     ) >& $DQM_DIR/agents/$NOW-$HOST-import.log </dev/null & )
    ;;

  # offline
  vocms34:*agents* ) 
    # standard lot of agents
    for D in offline caf dev; do
      DQM_DATA=/data/dqm/$D
      mkdir -p $DQM_DATA/agents
      (set -x
       (visDQMReceiveDaemon \
         $DQM_DATA/uploads \
         $DQM_DATA/repository/data \
         $DQM_DATA/agents/register \
         $DQM_DATA/agents/zip \
       ) >& $DQM_DATA/agents/$NOW-$HOST-receive.log </dev/null &

       (visDQMZipDaemon \
         $DQM_DATA/agents/zip \
         $DQM_DATA/repository/data \
         $DQM_DATA/repository/zipped \
         $DQM_DATA/agents/stageout \
       ) >& $DQM_DATA/agents/$NOW-$HOST-zip.log </dev/null &

       (visDQMImportDaemon \
         $DQM_DATA/agents/register \
         $DQM_DATA/repository/data \
         $DQM_DATA/ix \
         $DQM_DATA/agents/historic \
       ) >& $DQM_DATA/agents/$NOW-$HOST-import.log </dev/null & )
    done
esac

# Migration, disabled by default, and likely disabled even if requested.
case $HOST:$EXTRA in
  srv-c2d04-21:*migration* )
    for i in $(seq 1 $(expr 5 + $(expr $(date +%s) % 10))); do key=$RANDOM; done
    echo -n "$0: really start migration agents? (y/n) "
    read answer; case $answer in y ) ;; * ) exit 2 ;; esac
    echo -n "$0: that was probably a mistake! say $key if you *really* want to continue: "
    read answer; case $answer in $key ) ;; * ) exit 2 ;; esac

    (jobs -Z "visDQMMigrationProcess";
     while true; do
       for f in $(find $DQM_DATA/repository{2,3}/original -name 'DQM_V????_*_R00*.root' | sort); do
         if [ $(find $DQM_DATA/repository/original -name $(basename $f) | wc -l) = 0 ]; then
           v=$(basename $f | sed 's/.*_V\([0-9][0-9][0-9][0-9]\)_.*/\1/')
           b=$DQM_DATA/uploads2/$v/$(basename $f | sed s/_V${v}_/_V0001_/)
           [ -f $b -o -f $b.bad -o -f $b.origin.bad ] && continue
           mkdir -p $(dirname $b)
           ln $f $b
           echo "md5:$(md5sum < $b | awk '{print $1}') $(stat -c '%s' $b) $b" > $b.origin
         fi
       done
       sleep 1200
     done) >>& $DQM_DIR/agents/$NOW-$HOST-upload.log </dev/null & ;;

  vocms34:*migration* ) 
    for i in $(seq 1 $(expr 5 + $(expr $(date +%s) % 10))); do key=$RANDOM; done
    echo -n "$0: really start migration agents? (y/n) "
    read answer; case $answer in y ) ;; * ) exit 2 ;; esac
    echo -n "$0: that was probably a mistake! say $key if you *really* want to continue: "
    read answer; case $answer in $key ) ;; * ) exit 2 ;; esac

    for D in offline caf dev; do
      DQM_DATA=/data/dqm/$D
      mkdir -p $DQM_DATA/agents
      (jobs -Z "visDQMMigrationProcess";
       for f in $(find $DQM_DATA/old/data -name '*.root.origin' | sort); do
         if [ $(find $DQM_DATA/repository/data -name $(basename ${f%.origin}) | wc -l) = 0 ]; then
           v=$(basename $f | sed 's/.*_V\([0-9][0-9][0-9][0-9]\)_.*/\1/')
           b=$DQM_DATA/uploads2/$v/$(basename $f | sed s/_V${v}_/_V0001_/)
           if [ ! -f $b -a ! -f $b.bad ]; then
             mkdir -p $(dirname $b)
             ln $f $b
             ln ${f%.origin} ${b%.origin}
           fi
         fi
       done) >>& $DQM_DATA/agents/$NOW-$HOST-upload.log </dev/null &
    done ;;
esac

######################################################################
# Start collector if requested.
case ${EXTRA:-collector} in *collector* )
  crontab -l | grep restart-collector | sed 's|^[*0-9 ]*||' | sh -x ;;
esac

######################################################################
# Start web server if requested.
case ${EXTRA:-webserver} in *webserver* )
  for cfg in $CONFIGS; do
    (set -x; visDQMControl start all from $DQM_DIR/config/server-conf-$cfg.py)
  done ;;
esac
